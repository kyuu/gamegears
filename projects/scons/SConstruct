developer_src_files = Split("""
    ../../source/developer/AddNewFileDialog.cpp
    ../../source/developer/App.cpp
    ../../source/developer/Developer.cpp
    ../../source/developer/FileExplorer.cpp
    ../../source/developer/jsoncpp.cpp
    ../../source/developer/MenuBar.cpp
    ../../source/developer/NewDirectoryDialog.cpp
    ../../source/developer/NewProjectDialog.cpp
    ../../source/developer/NewFileDialog.cpp
    ../../source/developer/Output.cpp
    ../../source/developer/PaneToolBar.cpp
    ../../source/developer/Preferences.cpp
    ../../source/developer/PreferencesDialog.cpp
    ../../source/developer/ProjectProperties.cpp
    ../../source/developer/ProjectPropertiesDialog.cpp
    ../../source/developer/ProjectToolBar.cpp
    ../../source/developer/SaveChangesDialog.cpp
    ../../source/developer/StandardToolBar.cpp
    ../../source/developer/StatusBar.cpp
    ../../source/developer/TextEditor.cpp
    ../../source/developer/TextToolBar.cpp
""")

OPTIONS_TEMPLATE = {
  'mode': {
    'allowed': ['debug', 'release'],
    'default': 'release',
    'help':    'the build configuration'
  },
  'verbose': {
    'allowed': ['yes', 'no'],
    'default': 'no',
    'help': 'more output from compiler and linker'
  }
}

def FetchOptions():
    options = {}
    for (name, option) in OPTIONS_TEMPLATE.iteritems():
        value = ARGUMENTS.get(name, option['default'])
        if value not in option['allowed']:
            print 'Error: \'%s\' not allowed for %s' % (value, name)
            Exit()
        else:
            options[name] = value
    return options

def Build():
    options = FetchOptions()

    print 'Building GameGears in %s mode...' % (options['mode'])
    
    env = DefaultEnvironment()
    env.ParseConfig('wx-config --cxxflags --libs all')
    
    if options['mode'] == 'debug':
        env.Append(CCFLAGS = ['-g', '-O0'],
                   CPPDEFINES = ['_DEBUG'])
    else:
        env.Append(CCFLAGS = ['-O2'],
                   CPPDEFINES = ['NDEBUG'])

    if options['verbose'] == 'no':
        env.Append(CCCOMSTR       = "Compiling object $TARGET",
                   CXXCOMSTR      = "Compiling object $TARGET",
                   SHCCCOMSTR     = "Compiling shared object $TARGET",
                   SHCXXCOMSTR    = "Compiling shared object $TARGET",
                   LINKCOMSTR     = "Linking $TARGET",
                   SHLINKCOMSTR   = "Linking shared $TARGET",
                   LDMODULECOMSTR = "Building loadable module $TARGET",
                   RANLIBCOMSTR   = "Indexing $TARGET",
                   RCCOMSTR       = "Building resource file $TARGET")
    
    developer = env.Program('developer', developer_src_files)

Build()
